buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://repo.grails.org/grails/core" }
	}
	dependencies {
		classpath "io.github.gradle-nexus:publish-plugin:1.0.0"
	}
}

plugins {
	id 'java'
	id 'groovy'
	id 'java-library'
    id 'signing'
    id 'idea'
    id 'maven-publish'
}


ext {
    isBuildSnapshot = version.endsWith('-SNAPSHOT')
    isReleaseVersion = !isBuildSnapshot
}


group = 'com.bertramlabs.plugins'

repositories {
	jcenter()
	mavenCentral()
}

if (isReleaseVersion) {
    apply plugin: "io.github.gradle-nexus.publish-plugin"
    nexusPublishing {
        repositories {
            sonatype {
                if(project.hasProperty('mavenUser')) {
                    username = mavenUser
                    password = mavenPassword
                }   
            }
        }
    }
} else {
	
    publishing {
        repositories {
            maven {
                url = "http://nexus.bertramlabs.com/content/repositories/snapshots"
                if(project.hasProperty('labsNexusUser')) {
                    credentials {
                        username = labsNexusUser
                        password = labsNexusPassword
                    }
                }
            }
        }
    }
}

subprojects { project ->
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    afterEvaluate {
        signing {
            required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
            sign publishing.publications.maven
        }
    }

    tasks.withType(Sign) {
        onlyIf { isReleaseVersion }
    }

    //do not generate extra load on Nexus with new staging repository if signing fails
    tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
        shouldRunAfter(tasks.withType(Sign))
    }
}

dependencies {
	api 'org.codehaus.groovy:groovy:3.0.7'
	api 'org.codehaus.groovy:groovy-templates:3.0.7'
	api 'org.mozilla:rhino:1.7R4'
	testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
}

test {
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
}
